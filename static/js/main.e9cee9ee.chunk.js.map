{"version":3,"sources":["components/enword-service-context/enword-service-context.js","services/index.js","services/enwordService.js","components/interactive-window/index.js","components/interactive-window/interactive-window.js","components/main-input/index.js","components/main-input/main-input.js","components/main-button/index.js","components/main-button/main-button.js","components/information-window/index.js","components/information-window/information-window.js","components/spinner/index.js","components/spinner/spinner.js","actions/actions.js","components/hoc-fun/with-enword-service.js","components/hoc-fun/functions.js","utils/index.js","components/registration/registration.js","components/registration/index.js","components/login/login.js","components/login/index.js","components/logout/logout.js","components/logout/index.js","components/header/header.js","components/header/index.js","components/footer/footer.js","components/footer/index.js","components/user-info/user-info.js","components/user-info/index.js","components/main-box/index.js","components/main-box/main-box.js","components/pages/main-page.js","components/interactive-button/index.js","components/interactive-button/interactive-button.js","components/learn-words/index.js","components/learn-words/learn-words.js","components/select-level/select-level.js","components/select-level/index.js","components/test-button/index.js","components/test-button/test-button.js","components/test-option-block/test-options-block.js","components/test-option-block/index.js","components/test-variant-block/test-variant-block.js","components/test-variant-block/index.js","components/test-words/index.js","components/test-words/test-words.js","components/interactive-window-data/interactive-window-data.js","components/interactive-window-data/index.js","components/pages/main-learn-page.js","components/pages/main-test-page.js","components/pages/about-site.js","components/pages/contacts.js","components/app/app.js","components/app/index.js","reducers/index.js","store.js","index.js"],"names":["React","createContext","EnwordServiceProvider","Provider","EnwordServiceConsumer","Consumer","EnwordService","_apiBase","getWords","count","user","a","fetch","headers","res","status","Error","json","body","addUser","newUser","method","JSON","stringify","isUser","getUserData","setUserData","ok","InteractiveWindow","props","className","onClick","width","height","viewBox","fill","xmlns","fillRule","d","children","MainInput","mode","type","placeholder","onChange","value","MainButton","button","this","text","Component","InformationWindow","Spinner","data-loader","loadingSite","userData","payload","withEnwordService","Wrapped","enwordService","mixArray","arr","sort","Math","random","getNewArray","len","newArr","i","length","getCloneObjectsArray","main","mixWithoutMain","slice","getStringForAuth","login","password","window","btoa","setCookieAuthStr","name","maxAgeDay","sec","document","cookie","averageMark","prevMark","newMark","toFixed","Registration","state","passWord","infoWindow","warning","isLoading","isLoaded","setName","e","setState","target","setLogin","setPassWord","validateForm","field","getRegistration","username","first_name","then","stringAuth","registration","userName","loginPassWord","setTimeout","closeWindow","onPressEnter","preventDefault","onSubmit","mapDispatchToProps","connect","Login","level","mark","point","testCount","test_count","Logout","logoutSite","Header","interactiveWindow","modeRegistration","openLoginWindow","logElement","modelWindow","to","Footer","UserInfo","MainBox","MainPage","resetSelectLevel","openLearn","openTest","modeElement","InteractiveButton","isActive","LearnWords","nextCount","backCount","wordsList","data","next","back","testt","modeTest","eword","translate","SelectLevel","spinner","verifyLevel","enterLievel","isNaN","sentValue","setSelectLevel","getNewLevel","modeMain","spiner","prevProps","prevState","newSelect","TestButton","isMain","decCountMark","setClickBlock","ElementBlockClick","TestOptionsBlock","windowBlock","toggleButton","removeClickBlock","elements","map","item","key","TestVariantBlock","buttonIsActive","informationText","countMark","updateLevelMark","newLevel","selectLevel","newTestCount","updateUserData","updateUserDataOnServer","getInfoWindow","textGeneration","hello","results","warnin","TestWords","informationWindow","newArray","myName","InteractiveWindowData","MainLearnPage","modeLearn","modeSelect","MainTestPage","AboutSite","Contacts","href","App","matches","match","RegExp","replace","decodeURIComponent","undefined","getCookie","exact","path","component","initialState","reducer","action","store","createStore","ReactDOM","render","getElementById"],"mappings":"uoBAKIA,IAAMC,gBAFIC,E,EAAVC,SACUC,E,EAAVC,S,gCCFWC,E,iDCAXC,SAAW,sB,KAEXC,S,uCAAW,WAAOC,EAAOC,GAAd,iBAAAC,EAAA,sEACSC,MAAM,GAAD,OAAI,EAAKL,SAAT,oBAA6BE,EAA7B,KAAuC,CACxDI,QAAQ,CAAC,cAAgB,SAAhB,OAAyBH,MAF/B,UAIS,OAHZI,EADG,QAIAC,OAJA,sBAKG,IAAIC,MAAM,8JALb,uBAOUF,EAAIG,OAPd,cAOHC,EAPG,yBAQAA,GARA,2C,6DAWXC,Q,uCAAU,WAAOC,GAAP,eAAAT,EAAA,sEACUC,MAAM,GAAD,OAAI,EAAKL,SAAT,YACrB,CAACc,OAAQ,OACRR,QAAQ,CAAC,eAAe,kCACxBK,KAAMI,KAAKC,UAAUH,KAJhB,cACFN,EADE,yBAMCA,GAND,2C,2DASVU,O,uCAAS,WAAOd,GAAP,eAAAC,EAAA,sEACWC,MAAM,GAAD,OAAI,EAAKL,SAAT,WAA4B,CAC7CM,QAAQ,CAAC,cAAgB,SAAhB,OAAyBH,MAFjC,cACDI,EADC,yBAIEA,GAJF,2C,2DAOTW,Y,uCAAc,WAAOf,GAAP,eAAAC,EAAA,sEACMC,MAAM,GAAD,OAAI,EAAKL,SAAT,YACrB,CAACc,OAAQ,MACTR,QAAQ,CAAC,cAAgB,SAAhB,OAAyBH,MAHxB,cACNI,EADM,yBAKKA,GALL,2C,2DAQdY,Y,uCAAc,WAAOhB,EAAMQ,GAAb,eAAAP,EAAA,sEACMC,MAAM,GAAD,OAAI,EAAKL,SAAT,YACrB,CAACc,OAAQ,MACTR,QAAQ,CAAC,cAAgB,SAAhB,OAAyBH,GAAQ,eAAe,kCACzDQ,KAAMI,KAAKC,UAAUL,KAJX,YACNJ,EADM,QAMHa,GANG,yCAOCb,GAPD,aASA,IAAIE,MAAM,6JATV,2C,8ECrCHY,G,kBCCW,SAACC,GACvB,OAAO,yBAAKC,UAAU,sBACpB,yBAAKA,UAAU,cACb,yBAAKC,QAASF,EAAME,QAASD,UAAU,UAAUE,MAAM,OAAOC,OAAO,OAAOC,QAAQ,YAAYC,KAAK,QAAQC,MAAM,8BACjH,0BAAMC,SAAS,UAAUC,EAAE,qFAC3B,0BAAMD,SAAS,UAAUC,EAAE,sFAG9BT,EAAMU,YCTEC,G,YCCG,SAACX,GAAW,IAEnBY,EAA6CZ,EAA7CY,KAAMC,EAAuCb,EAAvCa,KAAMC,EAAiCd,EAAjCc,YAAaC,EAAoBf,EAApBe,SAAUC,EAAUhB,EAAVgB,MAE1C,OAAO,2BAAOf,UAAS,qBAAgBW,GACzBC,KAAMA,EACNC,YAAaA,EACbC,SAAUA,EACVC,MAAOA,MCTVC,G,6KCGF,IAGDC,EAHA,EAE4BC,KAAKnB,MAA7BY,EAFJ,EAEIA,KAAMV,EAFV,EAEUA,QAASkB,EAFnB,EAEmBA,KAmBvB,MAhBU,aAAPR,IAAmBM,EAAS,4BAAQjB,UAAU,cAAcC,QAASA,GACpE,+BAAckB,IAGR,cAAPR,IAAoBM,EAAS,4BAAQjB,UAAU,oCAAoCC,QAAS,cAC3F,+BAAckB,IAGR,eAAPR,IAAqBM,EAAS,4BAAQjB,UAAU,yBAAyBC,QAASA,GACjF,+BAAckB,IAGR,aAAPR,IAAmBM,EAAS,4BAAQjB,UAAU,wBAAwBC,QAASA,GAC9E,+BAAckB,IAGVF,M,GAvBUG,cCDXC,G,MCCW,SAACtB,GAEvB,OAAO,yBAAKC,UAAU,sBACjBD,EAAMU,YCJAa,G,MCCC,WACZ,OAAO,yBAAKtB,UAAU,UAAUuB,cAAY,qBCH1CC,EAAc,SAACC,GAAD,MAAe,CAACb,KAAM,qBAAsBc,QAASD,ICW1DE,EATW,kBAAM,SAACC,GAE7B,OAAO,SAAC7B,GACJ,OAAO,kBAACzB,EAAD,MACF,SAACuD,GAAD,OAAmB,kBAACD,EAAD,iBAAa7B,EAAb,CAAoB8B,cAAeA,W,gBCLnE,SAASC,EAASC,GACd,OAAOA,EAAIC,MAAK,WACZ,OAAOC,KAAKC,SAAW,MAwBhBC,MARf,SAAqBJ,EAAKpD,EAAOyD,GAC7B,IAAIC,EAbR,SAA8BN,GAG1B,IAFA,IAAIM,EAAS,GAELC,EAAE,EAAGA,EAAEP,EAAIQ,OAAQD,IACvBD,EAAM,sBAAOA,GAAP,gBAAmBN,EAAIO,MAGjC,OAAOD,EAMMG,CAAqBT,GAC9BU,EAAOJ,EAAO1D,GAClB8D,EAAKA,MAAO,EACZ,IAAIC,EAAiBZ,EAAS,GAAD,mBAAKO,EAAOM,MAAM,EAAGhE,IAArB,YAAgC0D,EAAOM,MAAMhE,EAAM,MAAKgE,MAAM,EAAGP,GAC9F,OAAON,EAAS,GAAD,mBAAKY,GAAL,CAAqBD,MCjBxC,SAASG,EAAiBC,EAAOC,GAE7B,OADYC,OAAOC,KAAP,UAAeH,EAAf,YAAwBC,IAMxC,SAASG,EAAiBC,EAAMnC,EAAOoC,GACnC,IAAMC,EAAgB,GAAVD,EAAa,GAAG,GAC5BE,SAASC,OAAT,UAAqBJ,EAArB,YAA6BnC,EAA7B,qBAA+CqC,GAGnD,SAASG,EAAYC,EAAU7E,EAAO8E,GAGlC,QADoBD,EAAS7E,EAAM8E,KAAW9E,GAAO+E,QAAQ,G,ICV3DC,E,4MAEFC,MAAQ,CAACV,KAAM,GACNL,MAAO,GACPgB,SAAU,GACVC,YAAY,EACZC,QAAS,KACTC,WAAW,EACXC,UAAU,EACVtD,KAAM,WAAK,OAAO,O,EAI3BuD,QAAU,SAACC,GACP,EAAKC,SAAS,CAAClB,KAAMiB,EAAEE,OAAOtD,S,EAGlCuD,SAAW,SAACH,GACR,EAAKC,SAAS,CAACvB,MAAOsB,EAAEE,OAAOtD,S,EAGnCwD,YAAc,SAACJ,GACX,EAAKC,SAAS,CAACP,SAAUM,EAAEE,OAAOtD,S,EAItCyD,aAAe,WAAO,IAAD,EACiB,EAAKZ,MAA/BV,EADS,EACTA,KAAML,EADG,EACHA,MAAOgB,EADJ,EACIA,SACJ,IAAdX,EAAKX,QAA6B,IAAfM,EAAMN,QAAgC,IAAlBsB,EAAStB,OAC/C,EAAK6B,SAAS,CAACL,QAAS,oKAAmCpD,KAAM,SAAC8D,GAAS,GAAkB,IAAfA,EAAMlC,OAAY,MAAO,wBAEvG,EAAKmC,mB,EAObA,gBAAkB,WAAO,IAAD,EACY,EAAKd,MAA9Bf,EADa,EACbA,MAAOgB,EADM,EACNA,SAAUX,EADJ,EACIA,KACxB,EAAKkB,SAAS,CAACN,YAAY,EAAME,WAAW,IAC5C,EAAKjE,MAAM8B,cAAcxC,QAAQ,CAACsF,SAAU9B,EAAOC,SAAUe,EAAUe,WAAY1B,IAAO2B,MAAK,SAAC7F,GAC5F,IAAY,IAATA,EAAIa,IAA0B,MAAbb,EAAIC,OAAa,CACjC,IAAM6F,EAAclC,EAAiBC,EAAOgB,GAC5C,EAAK9D,MAAMgF,aAAa,CAAEC,SAAU9B,EAAM+B,cAAeH,IACzD7B,EAAiB,gBAAiB6B,EAAY,IAC9C,EAAK/E,MAAM8B,cAAcjC,YAAYkF,EAAY,CAAC5B,KAAMA,IACxD,EAAKkB,SAAS,CAACJ,WAAW,EAAOC,UAAU,IAC3CiB,YAAW,WAAK,EAAKnF,MAAMoF,gBAAgB,WAE3C,EAAKf,SAAS,CAACJ,WAAU,EAAOC,UAAS,IACzCiB,YAAW,WAAK,EAAKnF,MAAMoF,gBAAgB,U,EAMvDC,aAAe,SAACjB,GACZA,EAAEkB,iBACF,EAAKb,gB,uDAOA,IAAD,EAE8EtD,KAAK0C,MAA/EV,EAFJ,EAEIA,KAAML,EAFV,EAEUA,MAAOgB,EAFjB,EAEiBA,SAAUE,EAF3B,EAE2BA,QAASC,EAFpC,EAEoCA,UAAWC,EAF/C,EAE+CA,SAAUH,EAFzD,EAEyDA,WAAYnD,EAFrE,EAEqEA,KAEzE,OAAGmD,IAAeE,GAAaC,EACpB,kBAAC,EAAD,4GAC2Bf,IAInCY,GAAcE,EACN,kBAAC,EAAD,KACK,kBAAC,EAAD,QAIbF,GAAeE,GAAcC,EASzB,yBAAKjE,UAAU,gBAClB,iPACA,gTACA,0BAAMsF,SAAUpE,KAAKkE,cACrB,kBAAC,EAAD,CAAWxE,KAAK,OAAOC,YAAY,qBAAMC,SAAUI,KAAKgD,QAASnD,MAAOmC,EAAMvC,KAAMA,EAAKuC,KACzF,kBAAC,EAAD,CAAWtC,KAAK,OAAOC,YAAY,iCAAQC,SAAUI,KAAKoD,SAAUvD,MAAO8B,EAAOlC,KAAMA,EAAKkC,KAC7F,kBAAC,EAAD,CAAWjC,KAAK,WAAWC,YAAY,uCAASC,SAAUI,KAAKqD,YAAaxD,MAAO8C,EAAUlD,KAAMA,EAAKkD,KACxG,2BAAIE,GACJ,kBAAC,EAAD,CAAY5C,KAAK,+GAAqBR,KAAK,eAhBpC,kBAAC,EAAD,wX,GAnFQS,aA2GrBmE,EAAqB,CAAER,aJlHR,SAAC7B,GAClB,MAAO,CAACtC,KAAM,eAAgBc,QAASwB,KKJ5BS,EDuHAhC,IAAoB6D,aAJX,SAAC5B,GAAD,MAAY,CAACoB,SAAUpB,EAAMoB,YAIOO,EAAzBC,CAA6C7B,IE7G1E8B,G,kNAEF7B,MAAQ,CAACf,MAAO,GACPgB,SAAU,GACVC,YAAY,EACZC,QAAS,KACTC,WAAW,EACXC,UAAU,EACVtD,KAAM,WAAK,OAAO,O,EAG3B2D,SAAW,SAACH,GACR,EAAKC,SAAS,CAACvB,MAAOsB,EAAEE,OAAOtD,S,EAGnCwD,YAAc,SAACJ,GACX,EAAKC,SAAS,CAACP,SAAUM,EAAEE,OAAOtD,S,EAGtCyD,aAAe,WAAO,IAAD,EACW,EAAKZ,MAAzBf,EADS,EACTA,MAAOgB,EADE,EACFA,SACG,IAAfhB,EAAMN,QAAgC,IAAlBsB,EAAStB,OAC5B,EAAK6B,SAAS,CAACL,QAAS,oKAAmCpD,KAAM,SAAC8D,GAAS,GAAkB,IAAfA,EAAMlC,OAAY,MAAO,wBAGvG,EAAKmC,mB,EAIbA,gBAAkB,WACd,EAAKN,SAAS,CAACN,YAAY,EAAME,WAAW,IAC5C,IAAMiB,EAAgBrC,EAAiB,EAAKgB,MAAMf,MAAO,EAAKe,MAAMC,UACpE,EAAK9D,MAAM8B,cAAclC,YAAYsF,GAAeJ,MAAK,SAAC7F,GACnDA,EAAIa,IAAmB,MAAbb,EAAIC,OACbD,EAAIG,OAAO0F,MAAK,SAAC7F,GACb,EAAKe,MAAMyB,YAAY,CAACkE,MAAO1G,EAAI0G,MAAOC,KAAM3G,EAAI4G,MAAOX,gBAAeD,SAAUhG,EAAIkE,KAAM2C,UAAW7G,EAAI8G,aAC7G7C,EAAiB,gBAAiBgC,EAAe,IACjD,EAAKb,SAAS,CAACJ,WAAW,EAAOC,UAAU,IAC3CiB,YAAW,WAAK,EAAKnF,MAAMoF,gBAAgB,UAG/C,EAAKf,SAAS,CAACJ,WAAU,EAAOC,UAAS,IACzCiB,YAAW,WAAK,EAAKnF,MAAMoF,gBAAgB,W,EAKvDC,aAAe,SAACjB,GACZA,EAAEkB,iBACF,EAAKb,gB,uDAGA,IAAD,EAEsEtD,KAAK0C,MAAxEf,EAFH,EAEGA,MAAOgB,EAFV,EAEUA,SAAUE,EAFpB,EAEoBA,QAASD,EAF7B,EAE6BA,WAAYG,EAFzC,EAEyCA,SAAUD,EAFnD,EAEmDA,UAAWrD,EAF9D,EAE8DA,KAElE,OAAGmD,IAAeE,GAAaC,EACpB,kBAAC,EAAD,yFAAqC/C,KAAKnB,MAAMiF,WAGxDlB,GAAcE,EACN,kBAAC,EAAD,KACK,kBAAC,EAAD,QAIbF,GAAeE,GAAcC,EAIzB,yBAAKjE,UAAU,SAClB,iTACA,0BAAMsF,SAAUpE,KAAKkE,cACrB,kBAAC,EAAD,CAAWxE,KAAK,OAAOC,YAAY,iCAAQC,SAAUI,KAAKoD,SAAUvD,MAAO8B,EAAOlC,KAAMA,EAAKkC,KAC7F,kBAAC,EAAD,CAAWjC,KAAK,WAAWC,YAAY,uCAASC,SAAUI,KAAKqD,YAAaxD,MAAO8C,EAAUlD,KAAMA,EAAKkD,KACxG,2BAAIE,GACJ,kBAAC,EAAD,CAAY5C,KAAK,iCAAQlB,QAASiB,KAAKkE,aAAczE,KAAK,eATnD,kBAAC,EAAD,oJ,GAnECS,cAwFdmE,EAAqB,CAAE/D,eClGdiE,EDoGA9D,IAAoB6D,aARX,SAAC5B,GAAD,MAAY,CAChC8B,MAAO9B,EAAM8B,MACbC,KAAM/B,EAAM+B,KACZX,SAAUpB,EAAMoB,YAKwCO,EAAzBC,CAA6CC,IE9F1EM,G,kNAEFnC,MAAQ,CAACf,MAAO,GAAIgB,SAAU,GAAIC,YAAY,G,EAE9CY,gBAAkB,WACd,EAAKN,SAAS,CAACN,YAAY,IAC3B,EAAK/D,MAAMiG,aACX3C,SAASC,OAAS,iBAClB4B,YAAW,WAAK,EAAKnF,MAAMoF,gBAAgB,O,uDAK3C,OAAGjE,KAAK0C,MAAME,WACH,kBAAC,EAAD,+FAGJ,yBAAK9D,UAAU,SAClB,kBAAC,EAAD,CAAYmB,KAAK,iCAAQlB,QAASiB,KAAKwD,gBAAiB/D,KAAK,kB,GAlBpDS,cAyBfmE,EAAqB,CAAES,WR9BV,iBAAO,CAACpF,KAAM,iBSDlBmF,EDiCAP,aAJS,iBAAO,KAISD,EAAzBC,CAA6CO,GEzBtDE,E,4MAEFrC,MAAQ,CAACsC,mBAAmB,EAAOvF,KAAM,M,EAEzCwE,YAAc,WACV,EAAKf,SAAS,CAAC8B,mBAAmB,K,EAGtCC,iBAAmB,WACf,EAAK/B,UAAS,SAACR,GAAD,MAAU,CAACsC,mBAAmB,EAAMvF,KAAM,oB,EAG5DyF,gBAAkB,WAChB,EAAKhC,UAAS,SAACR,GACb,OAAO,EAAK7D,MAAM8C,MAAM,CAAClC,KAAM,SAAUuF,mBAAmB,GAAM,CAACvF,KAAM,QAASuF,mBAAmB,O,uDAIhG,IAEGvF,EAASO,KAAK0C,MAAdjD,KAEF0F,EAAanF,KAAKnB,MAAM8C,MAAM,iCAAQ,iCAE5C,GAAG3B,KAAK0C,MAAMsC,kBAAkB,CAE5B,IAAII,EAAc,KAMlB,MAJY,iBAAT3F,IAAyB2F,EAAc,kBAAC,EAAD,CAAcnB,YAAajE,KAAKiE,eAC9D,UAATxE,IAAkB2F,EAAc,kBAAC,EAAD,CAAOnB,YAAajE,KAAKiE,eAChD,WAATxE,IAAmB2F,EAAc,kBAAC,EAAD,CAAQnB,YAAajE,KAAKiE,eAEvD,kBAAC,EAAD,CAAmBlF,QAASiB,KAAKiE,aACnCmB,GAIT,OAAO,yBAAKtG,UAAU,UACpB,6BACE,yBAAKA,UAAU,QAAO,kBAAC,IAAD,CAAMuG,GAAG,IAAT,YACtB,6BACE,4BACGrF,KAAKnB,MAAM8C,MAAM,KAAK,wBAAI5C,QAASiB,KAAKiF,kBAAlB,sEACvB,wBAAIlG,QAASiB,KAAKkF,iBAAkBC,W,GA3C/BjF,aCRN6E,ED+DAT,aAJS,SAAC5B,GACvB,MAAO,CAAEqB,cAAerB,EAAMqB,cAAepC,MAAOe,EAAMf,SAG7C2C,CAAyBS,G,ME/CzBO,IChBAA,EDEf,WAEI,OAAO,yBAAKxG,UAAU,UAClB,6BACI,4BACI,wBAAIA,UAAU,eAAc,kBAAC,IAAD,CAAMuG,GAAG,IAAT,YAC5B,wBAAIvG,UAAU,aAAY,kBAAC,IAAD,CAAMuG,GAAG,KAAT,gBAC1B,4BAAI,kBAAC,IAAD,CAAMA,GAAG,UAAT,0CACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,aAAT,yDERdE,G,mLAEO,IAAD,EAC8BvF,KAAKnB,MAA/B2F,EADJ,EACIA,MAAOC,EADX,EACWA,KAAMX,EADjB,EACiBA,SAErB,OAAO,yBAAKhF,UAAU,aAClB,4BAAKgF,GACL,oGAAoBU,IACpB,6HAAyBC,S,GARdvE,cCFRqF,EDqBAjB,aANS,SAAC5B,GAAD,MAAY,CAChC8B,MAAO9B,EAAM8B,MACbC,KAAM/B,EAAM+B,KACZX,SAAUpB,EAAMoB,YAGLQ,CAAyBiB,GErBzBC,E,uKCSP,OAAO,yBAAK1G,UAAU,YAClB,kBAAC,EAAD,MACHkB,KAAKnB,MAAMU,c,GAREW,aCIhBuF,E,4MAEF/C,MAAQ,CAACsC,mBAAmB,EAAOvF,KAAM,M,EAEzCwE,YAAc,WACV,EAAKf,SAAS,CAAC8B,mBAAmB,IAClC,EAAKnG,MAAM6G,oB,EAGfC,UAAY,WACR,EAAKzC,SAAS,CAAC8B,mBAAmB,EAAMvF,KAAM,W,EAGlDmG,SAAW,WACP,EAAK1C,SAAS,CAAC8B,mBAAmB,EAAMvF,KAAM,U,uDAGzC,IAGDoG,EAHA,EAEgC7F,KAAK0C,MAAjCsC,EAFJ,EAEIA,kBAAmBvF,EAFvB,EAEuBA,KAM3B,MAHU,UAAPA,IAAgBoG,EAAc,kBAAC,GAAD,OACvB,SAAPpG,IAAeoG,EAAc,kBAAC,GAAD,OAE7Bb,EACQ,kBAAC,EAAD,CAAmBjG,QAASiB,KAAKiE,aACnC4B,GAID,kBAAC,EAAD,KACJ,kBAAC,EAAD,CAAY5F,KAAK,4EAAgBR,KAAK,WAAWV,QAASiB,KAAK2F,YAC/D,kBAAC,EAAD,CAAY1F,KAAK,gEAAcR,KAAK,WAAWV,QAASiB,KAAK4F,gB,GAjClD1F,aAwCjBmE,EAAqB,CAAEqB,iBlB1BJ,iBAAO,CAAChG,KAAM,wBkB4BxB4E,eAJS,iBAAK,KAIWD,EAAzBC,CAA6CmB,GCjD7CK,G,kBCCW,SAACjH,GAEvB,OACI,4BAAQC,UAAWD,EAAMkH,SAAS,+BAA+B,qBAAsBhH,QAASF,EAAME,SAClG,+BAAcF,EAAMoB,QCLjB+F,E,kDCMX,WAAYnH,GAAO,IAAD,8BACd,cAAMA,IAIVoH,UAAY,WACR,EAAK/C,UAAS,gBAAGzF,EAAH,EAAGA,MAAH,MAAc,CAACA,QAASA,OANxB,EASlByI,UAAY,WACR,EAAKhD,UAAS,gBAAGzF,EAAH,EAAGA,MAAH,MAAc,CAACA,QAASA,OARtC,EAAKiF,MAAQ,CAACjF,MAAM,EAAG0I,UAAW,EAAKtH,MAAMuH,MAF/B,E,qDAeV,IAAAC,EAAK,KAAMC,EAAK,KAAhB,EAA6CtG,KAAK0C,MAA1BjF,EAAxB,EAAwBA,MAAO0I,EAA/B,EAA+BA,UAG/BE,EADD5I,EAAM,EACA,kBAAC,EAAD,CAAmBwC,KAAK,uCAAS8F,UAAU,EAAMhH,QAASiB,KAAKiG,YAE7D,kBAAC,EAAD,CAAmBhG,KAAK,uCAAS8F,UAAU,IAIlDO,EADD7I,EAAM,EACG,kBAAC,EAAD,CAAmBwC,KAAK,iCAAQ8F,UAAU,EAAMhH,QAASiB,KAAKkG,YAE9D,kBAAC,EAAD,CAAmBjG,KAAK,iCAAQ8F,UAAU,IAGtD,IAAIQ,EAAgB,IAAR9I,EAAU,kBAAC,EAAD,CAAYwC,KAAK,gEAAclB,QAASiB,KAAKnB,MAAM2H,SAAU/G,KAAK,aAAa,KAErG,OAAO,yBAAKX,UAAU,eAClB,kBAAC,EAAD,CAAYmB,KAAMkG,EAAU1I,GAAOgJ,MAAOhH,KAAK,aAC/C,kBAAC,EAAD,CAAYQ,KAAMkG,EAAU1I,GAAOiJ,UAAWjH,KAAK,eACnD,yBAAKX,UAAU,WACVwH,EACAD,GAEJE,O,GAvC2BrG,aCClCyG,I,kNACFjE,MAAQ,CAAC7C,MAAO,GAAI+G,SAAS,EAAO/D,QAAS,M,EAE7CjD,SAAW,SAACqD,GACR,EAAKC,SAAS,CAACrD,MAAOoD,EAAEE,OAAOtD,S,EAGnCgH,YAAc,SAACrC,EAAOsC,GAClB,IAAIjE,EAAU,MACViE,GAAatC,EACb3B,EAAU,kYACJkE,MAAMD,KAENA,GAAa,GAAmB,KAAdA,KADxBjE,EAAU,uOAId,EAAKK,SAAS,CAAEL,a,EASpBmE,UAAY,WACR,EAAK9D,UAAS,SAACR,GACX,MAAiB,KAAdA,EAAM7C,MACE,CAAEgD,QAAS,6GAEnBH,EAAMG,QAAe,IACxB,EAAKhE,MAAMoI,gBAAgBvE,EAAM7C,OACjC,EAAKhB,MAAMqI,aAAaxE,EAAM7C,MAAO,EAAKhB,MAAMsI,UACzC,CAACC,QAAQ,Q,iEAdLC,EAAWC,GACvBA,EAAUzH,QAAQG,KAAK0C,MAAM7C,OAC5BG,KAAK6G,YAAY7G,KAAKnB,MAAM2F,MAAOxE,KAAK0C,MAAM7C,S,+BAgB7C,IAAD,EAEgCG,KAAK0C,MAAjCkE,EAFJ,EAEIA,QAAS/G,EAFb,EAEaA,MAAOgD,EAFpB,EAEoBA,QAExB,GAAG+D,EAAS,OAAO,sCACnB,IAAInH,EAAOO,KAAK0C,MAAMG,QAAQ,qBAAqB,KAEnD,OAAO,yBAAK/D,UAAU,gBACd,2HACA,+IAA4BkB,KAAKnB,MAAM2F,QACvC,kBAAC,EAAD,CAAW9E,KAAK,OAAOC,YAAY,QAAQC,SAAUI,KAAKJ,SAAUC,MAAOA,EAAOJ,KAAMA,IACxF,2BAAIoD,GACJ,kBAAC,EAAD,CAAY5C,KAAK,KAAKlB,QAASiB,KAAKgH,UAAWvH,KAAK,kB,GAjD1CS,cA4DpBmE,GAAqB,CAAE4C,evBpDN,SAACM,GACpB,MAAM,CACF7H,KAAM,mBACNc,QAAS+G,KwBjBFZ,GDoEArC,aARS,SAAC5B,GACrB,MAAO,CACH8B,MAAO9B,EAAM8B,SAMmBH,GAAzBC,CAA6CqC,IEpE7Ca,I,oOCGX9E,MAAQ,CACJ5D,UAAW,M,EAGfC,QAAU,YAEiB,IAApB,EAAKF,MAAM4I,QACV,EAAKvE,SAAS,CAACpE,UAAW,qBAC1B,EAAKD,MAAM6I,gBAEX,EAAKxE,SAAS,CAACpE,UAAW,sBAE9B,EAAKD,MAAM8I,iB,uDAIf,OAAO,4BAAQ7I,UAAS,sBAAiBkB,KAAK0C,MAAM5D,WAAaC,QAASiB,KAAKjB,SAAS,+BAAciB,KAAKnB,MAAMoB,U,GAlB5FC,cCEnB0H,GAAoB,WACtB,OAAO,yBAAK9I,UAAU,yBCJX+I,G,4MDSXnF,MAAQ,CAACoF,aAAa,G,EAEtBH,cAAgB,WACZ,EAAKzE,SAAS,CAAC4E,aAAa,IAC5B,EAAKjJ,MAAMkJ,gB,EAGfC,iBAAmB,WACf,EAAK9E,SAAS,CAAC4E,aAAa,K,iEAGbT,EAAWC,GACvBtH,KAAKnB,MAAMpB,QAAU4J,EAAU5J,OAC9BuC,KAAKgI,qB,+BAIJ,IAAD,OAGIF,EAAgB9H,KAAK0C,MAArBoF,YAEFG,EADWjI,KAAKnB,MAAduH,KACc8B,KAAI,SAACC,GAAD,OAAQ,kBAAC,GAAD,CAAYlI,KAAMkI,EAAKzB,UAAWiB,cAAe,EAAKA,cAAeF,OAAQU,EAAK5G,KAAM6G,IAAG,UAAKD,EAAK1B,OAAV,OAAkB,EAAK5H,MAAMpB,OAASiK,aAAc,EAAK7I,MAAM6I,kBAG5L,OAAO,yBAAK5I,UAAU,sBACjBmJ,EACAH,EAAY,kBAAC,GAAD,MAAsB,U,GA7BhB5H,aEQzBmI,G,4MAEF3F,MAAQ,CAAC4F,gBAAgB,EAAOC,gBAAiB,GAAIC,UAAW,G,EAGhET,aAAe,WACX,EAAK7E,SAAS,CAACoF,gBAAgB,K,EAGnCZ,aAAe,WACX,EAAKxE,UAAS,SAACR,GACX,MAAO,CAAC8F,UAAW9F,EAAM8F,UAAU,O,EAK3CC,gBAAkB,WAAO,IAIjBC,EAJgB,EACkD,EAAK7J,MAAnE2F,EADY,EACZA,MAAOG,EADK,EACLA,UAAWF,EADN,EACMA,KAAMkE,EADZ,EACYA,YAAahH,EADzB,EACyBA,MAAOoC,EADhC,EACgCA,cAChDxB,EAAUF,EAAYoC,EAAME,EAAW,EAAKjC,MAAM8F,UAAU,GAC5DI,EAAejE,EAAY,EAK/B,GAHiE+D,EAA7D,EAAKhG,MAAM8F,UAAU,GAAG,GAAmB,IAAdG,GAA2B,MAARnE,EAAwBA,EAAM,EAAgBA,GAC5E,IAAnB,EAAK3F,MAAM8C,OAAoC,KAAnB,EAAK9C,MAAM2F,QAAYkE,EAASlE,GAC/D,EAAK3F,MAAMgK,eAAe,CAACrE,MAAOkE,EAAUjE,KAAMlC,EAASoC,UAAWiE,IACnEjH,EAAM,CACL,IAAMzD,EAAO,CAACwG,MAAOnC,EAASqC,WAAYgE,EAAcpE,MAAOkE,GAC/D,EAAK7J,MAAM8B,cAAcjC,YAAYqF,EAAe7F,K,EAK5D4K,uBAAyB,WACrB,GAAG,EAAKjK,MAAM8C,MAAM,CAChB,IAAIzD,EAAO,CAACwG,MAAO,EAAK7F,MAAM4F,KAAMG,WAAY,EAAK/F,MAAM8F,UAAWH,MAAO,EAAK3F,MAAM2F,OACxF,EAAK3F,MAAM8B,cAAcjC,YAAY,EAAKG,MAAMkF,cAAe7F,K,EAWvEa,QAAU,WACN,EAAK0J,kBACL,EAAK5J,MAAMkK,cAAc,EAAKC,mB,EAIlCA,eAAiB,WAAO,IAGhBC,EAAOC,EAASC,EAHD,EAC0B,EAAKtK,MAA5C2F,EADa,EACbA,MAAOmE,EADM,EACNA,YAAahH,EADP,EACOA,MAAOmC,EADd,EACcA,SAC3B0E,EAAc,EAAK9F,MAAnB8F,UAuBN,OArBAS,EAAQtH,EAAM,GAAD,OAAImC,GAAW,KAC5BoF,EAAO,mOAAgDV,EAAU,GAAGhG,QAAQ,IACzEgG,EAAU,GAAG,GAAmB,IAAdG,GAAmBnE,GAAO,MAC3C2E,EAAM,gMAA2C3E,IAElDgE,EAAU,EAAE,GAAmB,IAAdG,GAAmBnE,GAAO,MAC1C2E,EAAM,4fAEPX,EAAU,GAAG,GAAmB,IAAdG,GAA2B,KAARnE,IAAsB,IAAR7C,IAClDwH,EAAM,urBAEPX,EAAU,GAAG,GAAmB,IAAdG,GAA2B,MAARnE,IACpC2E,EAAM,4NAGF,6BACJ,2BAAIF,GACJ,2BAAIC,GACJ,2BAAIC,K,iEAlCO9B,GACZrH,KAAKnB,MAAMpB,QAAU4J,EAAU5J,OAC9BuC,KAAKkD,SAAS,CAACoF,gBAAgB,M,+BAuC9B,IAEGA,EAAmBtI,KAAK0C,MAAxB4F,eAFJ,EAG+BtI,KAAKnB,MAAhCuH,EAHJ,EAGIA,KAAM3I,EAHV,EAGUA,MAAOwI,EAHjB,EAGiBA,UACfxG,EAAO6I,EAAe,WAAW,YAEjCvI,EAAiB,IAARtC,EAAU,kBAAC,EAAD,CAAYwC,KAAM,yDAAalB,QAASiB,KAAKjB,QAASU,KAAMA,IAC5D,kBAAC,EAAD,CAAYQ,KAAM,uCAAUlB,QAASkH,EAAWxG,KAAMA,IAE/E,OAAO,yBAAKX,UAAU,sBAClB,kBAAC,GAAD,CAAkBsH,KAAMA,EAAM3I,MAAOA,EAAOsK,aAAc/H,KAAK+H,aAAcL,aAAc1H,KAAK0H,eAC/F3H,O,GA3FkBG,aAkGzBmE,GAAqB,CAAEwE,e7B1GN,SAACzC,GACpB,MAAO,CACH1G,KAAM,mBACNc,QAAS4F,K8BVFiC,GDmHA5H,IAAoB6D,aAJX,SAAC5B,GAAD,sBAAiBA,KAImB2B,GAAzBC,CAA6C+D,KEnHjEe,G,kDCMX,WAAYvK,GAAO,IAAD,8BACd,cAAMA,IAIVoH,UAAY,WACR,EAAK/C,UAAS,gBAAGzF,EAAH,EAAGA,MAAH,MAAc,CAACA,QAASA,OANxB,EASlBsL,cAAgB,SAAC9I,GACb,EAAKiD,SAAS,CAACmG,mBAAmB,EAAMpJ,KAAMA,KAR9C,EAAKyC,MAAQ,CAAC2G,mBAAmB,EAAOpJ,KAAM,GAAIxC,MAAM,EAAG0I,UAAW,EAAKtH,MAAMuH,MAFnE,E,qDAcT,IAAD,EAC4CpG,KAAK0C,MAA7CjF,EADJ,EACIA,MAAO0I,EADX,EACWA,UAEf,GAHI,EACsBkD,kBAGtB,OAAO,kBAAC,EAAD,KAAoBrJ,KAAK0C,MAAMzC,MAG1C,IAAMqJ,EAAWrI,EAAYkF,EAAW1I,EAAO,GAE/C,OAAO,yBAAKqB,UAAU,cAClB,kBAAC,EAAD,CAAYmB,KAAMkG,EAAU1I,GAAOgJ,MAAOhH,KAAK,aAC/C,kBAAC,GAAD,CAAkB2G,KAAMkD,EAAU7L,MAAOA,EAAOsL,cAAe/I,KAAK+I,cAAe9C,UAAWjG,KAAKiG,iB,GA1BxE/F,aCEnCqJ,GAAS,uBAGPC,G,kDACF,WAAY3K,GAAO,IAAD,8BACd,cAAMA,IAcV2H,SAAW,WAEP,EAAKtD,SAAS,CAACzD,KAAM,UAjBP,EAoBlByH,YAAc,SAAC1C,EAAO2C,GAElB,EAAKjE,SAAS,CAACkD,KAAM,OACrB,EAAK5I,SAASgH,EAAO+E,IAAQ5F,MAAK,SAAC7F,GAC/B,EAAKoF,SAAS,CAACkD,KAAMtI,EAAK2B,KAAM0H,QAtBpC,EAAKzE,MAAQ,CAAC0D,KAAM,KAAM3G,KAAM,EAAKZ,MAAMY,MAC3C,EAAKjC,SAAW,EAAKqB,MAAM8B,cAAcnD,SAH3B,E,gEAME,IAAD,OAEM,WAAlBwC,KAAKnB,MAAMY,MAEdO,KAAKxC,SAASwC,KAAKnB,MAAM2F,MAAO+E,IAAQ5F,MAAK,SAAC7F,GAC1C,EAAKoF,SAAS,CAACkD,KAAMtI,S,+BAiBpB,IAMDmK,EANA,EAEiBjI,KAAK0C,MAAnB0D,EAFH,EAEGA,KAAM3G,EAFT,EAESA,KAFT,EAI8BO,KAAKnB,MAA/BsI,EAJJ,EAIIA,SAAUlD,EAJd,EAIcA,YAIlB,OAAImC,GAAe,WAAP3G,GAEF,WAAPA,IAAiBwI,EAAS,kBAAC,GAAD,CAAaf,YAAalH,KAAKkH,YAAaC,SAAUA,KACzE,UAAP1H,IAAgBwI,EAAS,kBAAC,EAAD,CAAY7B,KAAMA,EAAMI,SAAUxG,KAAKwG,YACzD,SAAP/G,IAAewI,EAAS,kBAAC,GAAD,CAAW7B,KAAMA,EAAOnC,YAAaA,KAExD,yBAAKnF,UAAU,2BAClBmJ,IAP+B,kBAAC,EAAD,U,GArCR/H,aCVrBsJ,GD6DA/I,IAAoB6D,aAFX,SAAC5B,GAAD,MAAY,CAACA,MAAOA,EAAOqB,cAAerB,EAAMqB,cAAeS,MAAO9B,EAAM8B,SAEjEF,CAAyBkF,KElC7CC,G,4MAvBX/G,MAAQ,CAACjD,KAAM,M,EAEfiK,UAAY,WACR,EAAKxG,UAAS,SAACR,GAAD,MAAU,CAACjD,KAAM,a,EAGnCkK,WAAa,WACT,EAAKzG,UAAS,SAACR,GAAD,MAAU,CAACjD,KAAM,c,uDAK/B,OAAGO,KAAK0C,MAAMjD,KACH,kBAAC,GAAD,CAAuBA,KAAMO,KAAK0C,MAAMjD,KAAM0H,SAAS,UAG1D,kBAAC,WAAD,KACJ,kBAAC,EAAD,CAAYlH,KAAK,gHAAsBlB,QAASiB,KAAK0J,UAAWjK,KAAK,aACrE,kBAAC,EAAD,CAAYQ,KAAK,8FAAmBlB,QAASiB,KAAK2J,WAAYlK,KAAK,kB,GApBnDS,aC0Bb0J,G,4MAvBXlH,MAAQ,CAACjD,KAAM,M,EAEf+G,SAAW,WACP,EAAKtD,UAAS,iBAAK,CAACzD,KAAM,Y,EAG9BkK,WAAa,WACT,EAAKzG,UAAS,iBAAK,CAACzD,KAAM,c,uDAK1B,OAAGO,KAAK0C,MAAMjD,KACH,kBAAC,GAAD,CAAuBA,KAAMO,KAAK0C,MAAMjD,KAAM0H,SAAS,SAG1D,kBAAC,EAAD,KACJ,kBAAC,EAAD,CAAYlH,KAAK,qOAA4ClB,QAASiB,KAAK2J,WAAYlK,KAAK,aAC5F,kBAAC,EAAD,CAAYQ,KAAK,0NAA2ClB,QAASiB,KAAKwG,SAAU/G,KAAK,kB,GApB1ES,aCUZ2J,I,MAZG,WACd,OAAO,yBAAK/K,UAAU,cAClB,gJACA,smBACA,6nCACA,ypBACA,ktCACA,q9BACA,qICDOgL,I,MAPE,WACb,OAAO,yBAAKhL,UAAU,YAClB,qOACA,0JAA2B,uBAAGiL,KAAK,gCAAR,6B,QCO7BC,G,kLAEkB,IAAD,OACb5H,EpChBV,SAAmBJ,GACf,IAAIiI,EAAU9H,SAASC,OAAO8H,MAAM,IAAIC,OACtC,WAAanI,EAAKoI,QAAQ,+BAAgC,QAAU,aAEtE,OAAOH,EAAUI,mBAAmBJ,EAAQ,SAAMK,EoCYnCC,CAAU,iBACpBnI,GACCpC,KAAKnB,MAAM8B,cAAclC,YAAY2D,GAAQuB,MAAK,SAAC7F,GAC/B,MAAbA,EAAIC,QACHD,EAAIG,OAAO0F,MAAK,SAAC7F,GACb,EAAKe,MAAMyB,YAAY,CAACyD,cAAe3B,EACfoC,MAAO1G,EAAI0G,MACXC,KAAM3G,EAAI4G,MACVZ,SAAUhG,EAAIkE,KACd2C,UAAW7G,EAAI8G,qB,+BAQrD,OAAO,yBAAK9F,UAAU,OACd,kBAAC,EAAD,MACA,yBAAKA,UAAU,gBACX,kBAAC,KAAD,CAAO0L,OAAK,EAACC,KAAK,IAAIC,UAAWjF,IACjC,kBAAC,KAAD,CAAO+E,OAAK,EAACC,KAAK,SAASC,UAAWb,KACtC,kBAAC,KAAD,CAAOW,OAAK,EAACC,KAAK,YAAYC,UAAWZ,MAEjD,kBAAC,EAAD,W,GA3BM9M,IAAMkD,WAkClBmE,GAAqB,CAAE/D,eC7Cd0J,GD+CAvJ,IAAoB6D,aAJX,SAAC5B,GAAD,MAAY,KAIwB2B,GAAzBC,CAA6C0F,K,SE9C1EW,GAAe,CAAC5G,cAAe,OACfD,SAAU,iCACVW,KAAM,EACND,MAAO,EACPG,UAAW,EACXhD,OAAO,EACPgH,YAAa,GAiCpBiC,GA9BC,WAAiC,IAAhClI,EAA+B,uDAAzBiI,GAAcE,EAAW,uCAE5C,OAAOA,EAAOnL,MAEV,IAAK,qBAAL,MACgEmL,EAAOrK,QAA3DiE,EADZ,EACYA,KAAMD,EADlB,EACkBA,MAAOT,EADzB,EACyBA,cAAeD,EADxC,EACwCA,SAAUa,EADlD,EACkDA,UAC9C,MAAO,CAAEF,OAAMD,QAAOT,gBAAeD,WAAUa,YAAWhD,OAAO,EAAMgH,YAAa,GAExF,IAAK,cACD,OAAOgC,GAEX,IAAK,eACD,OAAO,2BAAKjI,GAAZ,IAAmB+B,KAAM,EAAGD,MAAO,EAAG7C,OAAO,EAAMmC,SAAU+G,EAAOrK,QAAQsD,SAAUC,cAAe8G,EAAOrK,QAAQuD,gBAExH,IAAK,mBAED,OAAO,2BAAIrB,GAAX,IAAkB+B,KAAMoG,EAAOrK,QAAQiE,KAAMD,MAAOqG,EAAOrK,QAAQgE,MAAOG,UAAWkG,EAAOrK,QAAQmE,UAAWgE,YAAa,IAEhI,IAAK,mBACD,OAAO,2BAAIjG,GAAX,IAAkBiG,YAAakC,EAAOrK,UAE1C,IAAK,qBACD,kCAAUkC,GAAV,IAAiBiG,YAAa,IAGlC,QAAS,OAAOjG,IChCToI,GAFDC,aAAYH,ICOpBjK,I,MAAgB,IAAIrD,GAE1B0N,IAASC,OAAO,kBAAC,IAAD,CAAUH,MAAOA,IACb,kBAAC5N,EAAD,CAAuB2C,MAAOc,IAC1B,kBAAC,IAAD,KACI,kBAAC,GAAD,SAGCwB,SAAS+I,eAAe,Y","file":"static/js/main.e9cee9ee.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst { \r\n    Provider: EnwordServiceProvider,\r\n    Consumer: EnwordServiceConsumer\r\n} = React.createContext();\r\n        \r\nexport {\r\n    EnwordServiceProvider, \r\n    EnwordServiceConsumer\r\n}","import EnwordService from './enwordService.js';\r\n\r\nexport default EnwordService;","class EnwordService {\r\n\r\n    _apiBase = \"https://sayword.ru/\";\r\n\r\n    getWords = async (count, user) => {\r\n        let res = await fetch(`${this._apiBase}getwords/${count}/`, {\r\n            headers:{'Authorization':`Basic ${user}`}\r\n        });\r\n        if(res.status!==200){\r\n            throw new Error('Данные не могут быть получены');\r\n        }\r\n        let body = await res.json();\r\n        return body;\r\n    }\r\n\r\n    addUser = async (newUser) => {\r\n        let res = await fetch(`${this._apiBase}adduser/`,\r\n        {method: 'POST',\r\n         headers:{'Content-Type':'application/json;charset=utf-8'},\r\n         body: JSON.stringify(newUser)\r\n        });\r\n        return res;\r\n    }\r\n\r\n    isUser = async (user) => {\r\n        let res = await fetch(`${this._apiBase}isuser/`, {\r\n            headers:{'Authorization':`Basic ${user}`}\r\n        });\r\n        return res;\r\n    }\r\n\r\n    getUserData = async (user) => {\r\n        let res = await fetch(`${this._apiBase}getdata/`,\r\n        {method: 'GET',\r\n        headers:{'Authorization':`Basic ${user}`}\r\n        });\r\n                return res;\r\n    }\r\n\r\n    setUserData = async (user, body) => {\r\n        let res = await fetch(`${this._apiBase}getdata/`,\r\n        {method: 'PUT',\r\n        headers:{'Authorization':`Basic ${user}`, 'Content-Type':'application/json;charset=utf-8'},\r\n        body: JSON.stringify(body)\r\n        });\r\n        if(res.ok){\r\n            return res;\r\n        }else{\r\n            throw new Error('Установить данные не удалось');\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default EnwordService;","import InteractiveWindow from './interactive-window';\r\n\r\nexport default InteractiveWindow;","import React from 'react';\r\nimport './interactive-window.css';\r\n\r\nconst InteractiveWindow = (props) => {\r\n    return(<div className=\"interactive-window\">\r\n      <div className=\"close-icon\">\r\n        <svg onClick={props.onClick} className=\"bi bi-x\" width=\"50px\" height=\"50px\" viewBox=\"0 0 16 16\" fill=\"white\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <path fillRule=\"evenodd\" d=\"M11.854 4.146a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708-.708l7-7a.5.5 0 0 1 .708 0z\"/>\r\n          <path fillRule=\"evenodd\" d=\"M4.146 4.146a.5.5 0 0 0 0 .708l7 7a.5.5 0 0 0 .708-.708l-7-7a.5.5 0 0 0-.708 0z\"/>\r\n        </svg>\r\n      </div>\r\n      {props.children}\r\n    </div>);\r\n}\r\n\r\nexport default InteractiveWindow;","import MainInput from './main-input'\r\n\r\nexport default MainInput;","import React from 'react';\r\nimport './main-input.css';\r\n\r\nconst MainInput = (props) => {\r\n\r\n    const {mode, type, placeholder, onChange, value } = props;\r\n    \r\n    return(<input className={`main-input ${mode}`} \r\n                  type={type} \r\n                  placeholder={placeholder}                   \r\n                  onChange={onChange} \r\n                  value={value} />);\r\n}\r\n\r\nexport default MainInput;","import MainButton from './main-button';\r\n\r\nexport default MainButton;","import React, { Component } from 'react';\r\nimport './main-button.css';\r\n\r\nclass MainButton  extends Component{\r\n\r\n    render(){\r\n    \r\n        const { mode, onClick, text } = this.props;\r\n        let button;\r\n\r\n        if(mode===\"isActive\"){button = <button className=\"main-button\" onClick={onClick}>\r\n            <span></span>{text}\r\n        </button>;}\r\n        \r\n        if(mode===\"notActive\"){button = <button className=\"main-button main-button-notactive\" onClick={()=>{}}>\r\n            <span></span>{text}\r\n        </button>;}\r\n        \r\n        if(mode===\"bt-opacity\"){button = <button className=\"main-button bt-opacity\" onClick={onClick}>\r\n            <span></span>{text}\r\n        </button>;}\r\n\r\n        if(mode===\"withWord\"){button = <button className=\"main-button with-word\" onClick={onClick}>\r\n            <span></span>{text}\r\n        </button>}\r\n        \r\n        return (button);\r\n    }\r\n}\r\n\r\nexport default MainButton;","import InformationWindow from './information-window';\r\n\r\nexport default InformationWindow;","import React from 'react';\r\nimport './information-window.css';\r\n\r\nconst InformationWindow = (props) => {\r\n    \r\n    return(<div className=\"information-window\">\r\n        {props.children}\r\n    </div>);\r\n}\r\n\r\nexport default InformationWindow;","import Spinner from './spinner';\r\n\r\nexport default Spinner;","import React from 'react';\r\nimport './spinner.css';\r\n\r\nconst Spinner = () => {\r\n    return(<div className=\"spinner\" data-loader=\"spinner-circle\"></div>);\r\n} \r\n\r\nexport default Spinner;","\r\nconst loadingSite = (userData) => ({type: \"LOADING_LOGIN_SITE\", payload: userData});\r\n\r\nconst logoutSite = () => ({type: \"LOGOUT_SITE\"});\r\n\r\nconst registration = (name) => {\r\n    return {type: \"REGISTRATION\", payload: name}\r\n}\r\n\r\nconst updateUserData = (data) => {\r\n    return {\r\n        type: \"UPDATE_USER_DATA\", \r\n        payload: data\r\n    }\r\n}\r\n\r\nconst setSelectLevel = (newSelect) => {\r\n    return{\r\n        type: \"SET_SELECT_LEVEL\",\r\n        payload: newSelect\r\n    }\r\n}\r\n\r\nconst resetSelectLevel = () => ({type: \"RESET_SELECT_LEVEL\"});\r\n\r\nexport {loadingSite, \r\n        logoutSite, \r\n        registration, \r\n        updateUserData, \r\n        setSelectLevel,\r\n        resetSelectLevel}","import React from 'react';\r\nimport { EnwordServiceConsumer } from '../enword-service-context';\r\n\r\nconst withEnwordService = () => (Wrapped) => {\r\n    \r\n    return (props) => {\r\n        return(<EnwordServiceConsumer>\r\n            {(enwordService) => <Wrapped {...props} enwordService={enwordService} />}\r\n        </EnwordServiceConsumer>);\r\n    }\r\n}\r\n\r\nexport default withEnwordService;","//функция полностью перемешивает массив\r\n\r\nfunction mixArray(arr){\r\n    return arr.sort(function(){\r\n        return Math.random() - 0.5;\r\n      });\r\n}\r\n\r\nfunction getCloneObjectsArray(arr){\r\n    let newArr = [];\r\n    \r\n    for(let i=0; i<arr.length; i++){\r\n        newArr = [...newArr, {...arr[i]}]\r\n    }\r\n\r\n    return newArr;\r\n}\r\n\r\n//функция принимает массив, номер целевого элемента и количество нужных вариантов ответов без верного.\r\n\r\nfunction getNewArray(arr, count, len){\r\n    let newArr = getCloneObjectsArray(arr);\r\n    let main = newArr[count];\r\n    main.main = true;\r\n    let mixWithoutMain = mixArray([...newArr.slice(0, count), ...newArr.slice(count+1)]).slice(0, len);\r\n    return mixArray([...mixWithoutMain, main]);\r\n}\r\n\r\nexport default getNewArray;","function getCookie(name) {\r\n    let matches = document.cookie.match(new RegExp(\r\n      \"(?:^|; )\" + name.replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, '\\\\$1') + \"=([^;]*)\"\r\n    ));\r\n    return matches ? decodeURIComponent(matches[1]) : undefined;\r\n  }\r\n\r\n//Функция для записи логина и пороля в нужный формат.\r\nfunction getStringForAuth(login, password){\r\n    const str = window.btoa(`${login}:${password}`);\r\n    return str;\r\n}\r\n\r\n\r\n//Функция для записи логина и пароля в куки (можно указать количество дней)\r\nfunction setCookieAuthStr(name, value, maxAgeDay){\r\n    const sec = maxAgeDay*24*60*60;\r\n    document.cookie = `${name}=${value}; max-age=${sec}`\r\n}\r\n\r\nfunction averageMark(prevMark, count, newMark){//функция для подсчета среднего значения, работает \r\n\r\n    let averageMark = ((prevMark*count+newMark)/++count).toFixed(2);\r\n    return averageMark;    \r\n}\r\n\r\nexport { getCookie, getStringForAuth, setCookieAuthStr, averageMark }","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './registration.css';\r\n\r\nimport MainInput from '../main-input';\r\nimport MainButton from '../main-button';\r\nimport InformainonWindow from '../information-window';\r\nimport Spinner from '../spinner'\r\nimport { registration } from '../../actions/actions';\r\nimport { withEnwordService } from '../hoc-fun';\r\nimport { getStringForAuth, setCookieAuthStr } from '../../utils';\r\n\r\nclass Registration extends Component{\r\n    \r\n    state = {name: \"\", \r\n             login: \"\", \r\n             passWord: \"\", \r\n             infoWindow: false, //открыто ли окно\r\n             warning: null, //информация, которая должна выводится после регистрации в информационном окне\r\n             isLoading: false,  //идет ли на данный момент загрузка\r\n             isLoaded: false,  //успешно ли произошла регистрация на сервере и получен ли положительный ответ \r\n             mode: ()=>{return null}//Непонятная функция\r\n            }\r\n\r\n    // Функции для установки имени, логина и пароля в state\r\n    setName = (e) => {\r\n        this.setState({name: e.target.value});\r\n    }\r\n    \r\n    setLogin = (e) => {\r\n        this.setState({login: e.target.value});\r\n    }\r\n    \r\n    setPassWord = (e) => {\r\n        this.setState({passWord: e.target.value});\r\n    }\r\n\r\n    //Проверка, все ли поля заполнены. Если заполнены все, то запускается процесс регистрации.\r\n    validateForm = () => {\r\n        const { name, login, passWord } = this.state;\r\n        if(name.length===0 || login.length===0 || passWord.length===0){\r\n            this.setState({warning: \"Заполните, пожулайста, все поля\", mode: (field)=>{if(field.length===0){return \"main-input-warning\"}}});\r\n        }else{\r\n            this.getRegistration();\r\n        }\r\n    }\r\n\r\n    \r\n    \r\n    //выводит информационное окно, регистрирует нового пользывателя на сервере ->  добовляет данные в ГлобХрон, сохраняет куки, обновляет пользовательские данные на сервере\r\n    getRegistration = () => {\r\n        const {login, passWord, name} = this.state;\r\n        this.setState({infoWindow: true, isLoading: true});\r\n        this.props.enwordService.addUser({username: login, password: passWord, first_name: name}).then((res)=>{//отправляет данные на сервер и ждет ответ\r\n            if(res.ok===true && res.status===200){\r\n                const stringAuth =  getStringForAuth(login, passWord);//Записываем логин и пароль в формат btoa\r\n                this.props.registration({ userName: name, loginPassWord: stringAuth });//Неизвестная функция (возможно из redux)\r\n                setCookieAuthStr('loginPassWord', stringAuth, 60);//Устанавливаем логин и пароль в куки на 60 дней\r\n                this.props.enwordService.setUserData(stringAuth, {name: name});//Неизвестно для чего нужна \r\n                this.setState({isLoading: false, isLoaded: true});\r\n                setTimeout(()=>{this.props.closeWindow()}, 1500);//закрывается окно через 1,5 секунды  (возможно лучше заменить на кнопку OK)\r\n            }else{\r\n                this.setState({isLoading:false, isLoaded:false})\r\n                setTimeout(()=>{this.props.closeWindow()}, 1500);//закрывается окно через 1,5 секунды  (возможно лучше заменить на кнопку OK)\r\n            }\r\n        });\r\n    }\r\n\r\n    //При нажатии Enter вызывает валидацию\r\n    onPressEnter = (e) => {\r\n        e.preventDefault();\r\n        this.validateForm();\r\n    };\r\n\r\n    \r\n\r\n    \r\n    \r\n    render(){\r\n\r\n        const { name, login, passWord, warning, isLoading, isLoaded, infoWindow, mode } = this.state;\r\n\r\n        if(infoWindow && !isLoading && isLoaded){\r\n            return <InformainonWindow>\r\n                        {`Приветствую тебя, ${name}`}\r\n                    </InformainonWindow>\r\n        }\r\n\r\n        if(infoWindow && isLoading){\r\n            return <InformainonWindow>\r\n                        <Spinner />\r\n                   </InformainonWindow>\r\n        }\r\n\r\n        if(infoWindow && !isLoading && !isLoaded){\r\n            return <InformainonWindow>\r\n                        \"Зарегистрировать нового пользывателя не удалось. Повторите попытку\"\r\n                   </InformainonWindow>\r\n        }\r\n\r\n\r\n\r\n        \r\n        return(<div className=\"registration\">\r\n            <h2>Введите данные для регистрации на сайте</h2>\r\n            <h3>Логин и пароль могут быть только на английском языке</h3>\r\n            <form onSubmit={this.onPressEnter}>\r\n            <MainInput type=\"text\" placeholder=\"Имя\" onChange={this.setName} value={name} mode={mode(name)} />\r\n            <MainInput type=\"text\" placeholder=\"Логин\" onChange={this.setLogin} value={login} mode={mode(login)} />\r\n            <MainInput type=\"password\" placeholder=\"Пароль\" onChange={this.setPassWord} value={passWord} mode={mode(passWord)} />\r\n            <p>{warning}</p>\r\n            <MainButton text=\"Зарегистрироваться\" mode=\"isActive\"/>\r\n            </form>\r\n        </div>);\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({userName: state.userName})\r\n\r\nconst mapDispatchToProps = { registration }\r\n\r\nexport default withEnwordService()(connect(mapStateToProps, mapDispatchToProps)(Registration));","import Registration from './registration';\r\n\r\nexport default Registration;","import React, { Component }  from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './login.css';\r\n\r\nimport MainInput from '../main-input';\r\nimport MainButton from '../main-button';\r\nimport InformainonWindow from '../information-window';\r\nimport Spinner from '../spinner'\r\nimport { loadingSite } from '../../actions/actions';\r\nimport { withEnwordService } from '../hoc-fun';\r\nimport { getStringForAuth, setCookieAuthStr } from '../../utils';\r\n\r\nclass Login extends Component{\r\n    \r\n    state = {login: \"\", \r\n             passWord: \"\", \r\n             infoWindow: false, \r\n             warning: null, \r\n             isLoading: false,  //идет ли на данный момент загрузка\r\n             isLoaded: false,  //успешно ли произошла регистрация на сервере и получен ли положительный ответ\r\n             mode: ()=>{return null}\r\n            }\r\n    \r\n    setLogin = (e) => {\r\n        this.setState({login: e.target.value});\r\n    }\r\n    \r\n    setPassWord = (e) => {\r\n        this.setState({passWord: e.target.value});\r\n    }\r\n\r\n    validateForm = () => {\r\n        const { login, passWord } = this.state;\r\n        if(login.length===0 || passWord.length===0){\r\n            this.setState({warning: \"Заполните, пожулайста, все поля\", mode: (field)=>{if(field.length===0){return \"main-input-warning\"}}});\r\n\r\n        }else{\r\n            this.getRegistration();\r\n        }\r\n    }\r\n    \r\n    getRegistration = () => {\r\n        this.setState({infoWindow: true, isLoading: true});\r\n        const loginPassWord = getStringForAuth(this.state.login, this.state.passWord);\r\n        this.props.enwordService.getUserData(loginPassWord).then((res)=>{\r\n            if(res.ok && res.status===200){\r\n                res.json().then((res)=>{\r\n                    this.props.loadingSite({level: res.level, mark: res.point, loginPassWord, userName: res.name, testCount: res.test_count });\r\n                    setCookieAuthStr('loginPassWord', loginPassWord, 60);\r\n                    this.setState({isLoading: false, isLoaded: true});\r\n                    setTimeout(()=>{this.props.closeWindow()}, 1500);\r\n                });\r\n            }else{\r\n                this.setState({isLoading:false, isLoaded:false})\r\n                setTimeout(()=>{this.props.closeWindow()}, 1500);//закрывается окно через 1,5 секунды  (возможно лучше заменить на кнопку OK)\r\n            }\r\n        });\r\n    }\r\n\r\n    onPressEnter = (e) => {\r\n        e.preventDefault();\r\n        this.validateForm();\r\n    };\r\n    \r\n    render(){\r\n\r\n        const {login, passWord, warning, infoWindow, isLoaded, isLoading, mode} = this.state;\r\n        \r\n        if(infoWindow && !isLoading && isLoaded){\r\n            return <InformainonWindow>{`Здравствуйте, ${this.props.userName}`}</InformainonWindow>\r\n        }\r\n\r\n        if(infoWindow && isLoading){\r\n            return <InformainonWindow>\r\n                        <Spinner />\r\n                   </InformainonWindow>\r\n        }\r\n\r\n        if(infoWindow && !isLoading && !isLoaded){\r\n            return <InformainonWindow>Неверный логин или пароль</InformainonWindow>\r\n        }\r\n        \r\n        return(<div className=\"login\">\r\n            <h2>Для входа в учетную запись введите Ваш логин и пароль</h2>\r\n            <form onSubmit={this.onPressEnter}>\r\n            <MainInput type=\"text\" placeholder=\"Логин\" onChange={this.setLogin} value={login} mode={mode(login)} />\r\n            <MainInput type=\"password\" placeholder=\"Пароль\" onChange={this.setPassWord} value={passWord} mode={mode(passWord)} />\r\n            <p>{warning}</p>\r\n            <MainButton text=\"Войти\" onClick={this.onPressEnter} mode=\"isActive\" />\r\n            </form>\r\n        </div>);\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    level: state.level,\r\n    mark: state.mark,\r\n    userName: state.userName\r\n});\r\n\r\nconst mapDispatchToProps = { loadingSite }\r\n\r\nexport default withEnwordService()(connect(mapStateToProps, mapDispatchToProps)(Login));","import Login from './login';\r\n\r\nexport default Login;","import React, { Component }  from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './logout.css';\r\n\r\nimport MainButton from '../main-button';\r\nimport InformainonWindow from '../information-window';\r\nimport { logoutSite } from '../../actions/actions';\r\n\r\nclass Logout extends Component{\r\n    \r\n    state = {login: \"\", passWord: \"\", infoWindow: false}\r\n    \r\n    getRegistration = () => {\r\n        this.setState({infoWindow: true});\r\n        this.props.logoutSite();\r\n        document.cookie = \"loginPassWord=\";\r\n        setTimeout(()=>{this.props.closeWindow()}, 1500);\r\n    }\r\n    \r\n    render(){\r\n        \r\n        if(this.state.infoWindow){\r\n            return <InformainonWindow>{`До скорых встреч`}</InformainonWindow>\r\n        }\r\n        \r\n        return(<div className=\"login\">\r\n            <MainButton text=\"Выйти\" onClick={this.getRegistration} mode=\"isActive\"/>\r\n        </div>);\r\n    }\r\n}\r\n\r\nconst mapStateToProps = () => ({});\r\n\r\nconst mapDispatchToProps = { logoutSite }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Logout)","import Logout from './logout';\r\n\r\nexport default Logout;","import React, { Component }from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {Link} from 'react-router-dom';\r\nimport './header.css';\r\n\r\nimport InteractiveWindow from '../interactive-window';\r\nimport Registration from '../registration';\r\nimport Login from '../login';\r\nimport Logout from '../logout';\r\n\r\nclass Header extends Component{\r\n    \r\n    state = {interactiveWindow: false, mode: null}\r\n\r\n    closeWindow = () => {\r\n        this.setState({interactiveWindow: false});\r\n    }\r\n    \r\n    modeRegistration = () => {\r\n        this.setState((state)=>({interactiveWindow: true, mode: \"registration\"}));\r\n    }\r\n\r\n    openLoginWindow = () => {\r\n      this.setState((state)=>{\r\n        return this.props.login?{mode: \"logout\", interactiveWindow: true}:{mode: \"login\", interactiveWindow: true}\r\n      });\r\n    }\r\n\r\n    render(){\r\n\r\n        const { mode } = this.state;  \r\n        \r\n        const logElement = this.props.login?\"Выйти\":\"Войти\";\r\n\r\n        if(this.state.interactiveWindow){\r\n          \r\n            let modelWindow = null;\r\n            \r\n            if(mode === \"registration\"){modelWindow = <Registration closeWindow={this.closeWindow} />}\r\n            if(mode === \"login\"){modelWindow = <Login closeWindow={this.closeWindow}/>}\r\n            if(mode === \"logout\"){modelWindow = <Logout closeWindow={this.closeWindow}/>}\r\n\r\n            return <InteractiveWindow onClick={this.closeWindow}>\r\n                {modelWindow}\r\n            </InteractiveWindow>\r\n        }\r\n        \r\n        return(<div className=\"header\">\r\n          <div>\r\n            <div className=\"logo\"><Link to=\"\">SayWord</Link></div>\r\n            <nav>\r\n              <ul>\r\n                {this.props.login?null:<li onClick={this.modeRegistration}>Регистрация</li>}\r\n                <li onClick={this.openLoginWindow}>{logElement}</li>\r\n              </ul>\r\n            </nav>\r\n          </div>\r\n        </div>)\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return { loginPassWord: state.loginPassWord, login: state.login };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Header);","import Header from './header';\r\n\r\nexport default Header;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './footer.css';\r\n\r\nfunction Footer(){\r\n\r\n    return(<div className=\"footer\">\r\n        <div>\r\n            <ul>\r\n                <li className=\"logo-footer\"><Link to=\"\">SayWord</Link></li>\r\n                <li className=\"site-name\"><Link to=\"/\">@enwords.ru</Link></li>\r\n                <li><Link to=\"/about\">О сайте</Link></li>\r\n                <li><Link to=\"/contacts\">Контакты</Link></li>\r\n            </ul>\r\n        </div>\r\n    </div>);\r\n}\r\n\r\nexport default Footer;","import Footer from './footer';\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './user-info.css';\r\n\r\nclass UserInfo extends Component{\r\n\r\n    render(){\r\n        const { level, mark, userName } = this.props;\r\n\r\n        return(<div className=\"user-info\">\r\n            <h2>{userName}</h2>\r\n            <h3>{`Ваш уровень ${level}`}</h3>\r\n            <h3>{`Ваш средний балл ${mark}`}</h3>\r\n        </div>);\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    level: state.level,\r\n    mark: state.mark,\r\n    userName: state.userName\r\n});\r\n\r\nexport default connect(mapStateToProps)(UserInfo);","import UserInfo from './user-info';\r\n\r\nexport default UserInfo;","import MainBox from './main-box';\r\n\r\nexport default MainBox;","import React, { Component } from 'react';\r\nimport './main-box.css';\r\n\r\nimport UserInfo from '../user-info';\r\n\r\nclass MainBox extends Component{\r\n    \r\n    \r\n\r\n    render(){\r\n\r\n        return(<div className=\"main-box\">\r\n            <UserInfo />\r\n        {this.props.children}\r\n    </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default MainBox;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport MainBox from '../main-box';\r\nimport MainButton from '../main-button';\r\nimport InteractiveWindow from '../interactive-window';\r\nimport { MainLearnPage, MainTestPage } from '../pages';\r\nimport { resetSelectLevel } from '../../actions/actions';\r\n\r\n\r\nclass MainPage extends Component{\r\n    \r\n    state = {interactiveWindow: false, mode: null}\r\n\r\n    closeWindow = () => {\r\n        this.setState({interactiveWindow: false});\r\n        this.props.resetSelectLevel();\r\n    }\r\n\r\n    openLearn = () => {\r\n        this.setState({interactiveWindow: true, mode: 'learn'});\r\n    }\r\n\r\n    openTest = () => {\r\n        this.setState({interactiveWindow: true, mode: 'test'});\r\n    }\r\n\r\n    render(){\r\n\r\n        const { interactiveWindow, mode } = this.state;\r\n        let modeElement;\r\n\r\n        if(mode===\"learn\"){modeElement = <MainLearnPage />}\r\n        if(mode===\"test\"){modeElement = <MainTestPage />}\r\n\r\n        if(interactiveWindow){\r\n            return <InteractiveWindow onClick={this.closeWindow}>\r\n                {modeElement}\r\n            </InteractiveWindow>\r\n        }\r\n\r\n        return (<MainBox>\r\n            <MainButton text=\"Изучать слова\" mode=\"isActive\" onClick={this.openLearn} />\r\n            <MainButton text=\"Пройти тест\" mode=\"isActive\" onClick={this.openTest} />\r\n        </MainBox>)\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ()=>({});\r\n\r\nconst mapDispatchToProps = { resetSelectLevel }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MainPage);","import InteractiveButton from './interactive-button';\r\n\r\nexport default InteractiveButton;","import React from 'react';\r\nimport './interactive-button.css';\r\n\r\nconst InteractiveButton = (props) => {\r\n\r\n    return(\r\n        <button className={props.isActive?\"interactive-button is-active\":\"interactive-button\"} onClick={props.onClick}>\r\n            <span></span>{props.text}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default InteractiveButton;","import LearnWords from './learn-words'\r\n\r\nexport default LearnWords;","import React, {Component} from 'react';\r\nimport './learn-words.css';\r\n\r\nimport MainButton from '../main-button';\r\nimport InteractiveButton from '../interactive-button';\r\n\r\n\r\nexport default class LearnWords extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {count:0, wordsList: this.props.data}\r\n    }\r\n\r\n    nextCount = () => {\r\n        this.setState(({ count })=>({count: ++count}));\r\n    }\r\n\r\n    backCount = () => {\r\n        this.setState(({ count })=>({count: --count}));\r\n    }\r\n\r\n    render(){\r\n\r\n        let next=null, back=null, { count, wordsList } = this.state;\r\n\r\n        if(count<9){\r\n            next=<InteractiveButton text=\"Вперед\" isActive={true} onClick={this.nextCount} />\r\n        }else{\r\n            next = <InteractiveButton text=\"Вперед\" isActive={false} />\r\n        }\r\n\r\n        if(count>0){\r\n            back =  <InteractiveButton text=\"Назад\" isActive={true} onClick={this.backCount} />\r\n        }else{\r\n            back =  <InteractiveButton text=\"Назад\" isActive={false} />\r\n        }\r\n\r\n        let testt = count===9?<MainButton text=\"Пройти тест\" onClick={this.props.modeTest} mode=\"isActive\"/>:null;\r\n\r\n        return(<div className=\"learn-words\">\r\n            <MainButton text={wordsList[count].eword} mode=\"withWord\"/>\r\n            <MainButton text={wordsList[count].translate} mode=\"bt-opacity\"/>\r\n            <div className=\"buttons\">\r\n                {back}\r\n                {next}\r\n            </div>\r\n            {testt}\r\n\r\n        </div>);\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './select-level.css';\r\n\r\nimport MainInput from '../main-input';\r\nimport MainButton from '../main-button';\r\nimport { setSelectLevel } from '../../actions/actions';\r\n\r\nclass SelectLevel extends Component{\r\n    state = {value: \"\", spinner: false, warning: null}\r\n    \r\n    onChange = (e) => {\r\n        this.setState({value: e.target.value});\r\n    }\r\n\r\n    verifyLevel = (level, enterLievel) => {\r\n        let warning = null;\r\n        if(+enterLievel>=level){\r\n            warning = \"Выбранный уровень не может быть больше либо равен Вашему текущему уровню\";\r\n        }else if( isNaN(enterLievel)){\r\n            warning = \"Выбранный уровень должен быть целым числом\";\r\n        }else if(+enterLievel<=0 && enterLievel!==\"\"){\r\n            warning = \"Выбранный уровень должен быть целым числом\";\r\n        }        \r\n        this.setState({ warning });        \r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){//вызываетя при каждом вводе данных в инпут\r\n        if(prevState.value!==this.state.value){\r\n            this.verifyLevel(this.props.level, this.state.value);\r\n        }\r\n    }\r\n\r\n    sentValue = () => { \r\n        this.setState((state)=>{\r\n            if(state.value===\"\"){\r\n                return { warning: \"Вы ничего не выбрали\" }\r\n            }\r\n            if(state.warning){return{}}\r\n            this.props.setSelectLevel(+state.value)//устанавливаем в state выбранный уровень\r\n            this.props.getNewLevel(+state.value, this.props.modeMain);//обновляем массив данных для тестирования\r\n            return {spiner: true}//запускаем спиннер на время загрузки данных\r\n        });\r\n    }\r\n\r\n    render(){\r\n\r\n        const { spinner, value, warning } = this.state;\r\n\r\n        if(spinner){return(<h1>Spiner</h1>);}\r\n        let mode = this.state.warning?\"main-input-warning\":null\r\n\r\n        return(<div className=\"select-level\">\r\n                <h2>Выберите уровень</h2>\r\n                <h3>{`Ваш текущий уровень ${this.props.level}`}</h3>\r\n                <MainInput type=\"text\" placeholder=\"Level\" onChange={this.onChange} value={value} mode={mode}/>\r\n                <p>{warning}</p>\r\n                <MainButton text=\"OK\" onClick={this.sentValue} mode=\"isActive\"/>\r\n            </div>);\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        level: state.level\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = { setSelectLevel };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectLevel);","import SelectLevel from './select-level';\r\n\r\nexport default SelectLevel;","import TestButton from './test-button';\r\n\r\nexport default TestButton;","import React, { Component } from 'react';\r\nimport './test-button.css'\r\n\r\nclass TestButton extends Component{\r\n\r\n    state = {\r\n        className: null\r\n    }\r\n\r\n    onClick = () => {\r\n        \r\n        if(this.props.isMain===true){\r\n            this.setState({className: \"test-button-true\"});\r\n            this.props.decCountMark();\r\n        }else{\r\n            this.setState({className: \"test-button-false\"});\r\n        }\r\n        this.props.setClickBlock();\r\n    }\r\n\r\n    render(){\r\n    return(<button className={`test-button ${this.state.className}`} onClick={this.onClick}><span></span>{this.props.text}</button>);\r\n    }\r\n}\r\n\r\nexport default TestButton;","import React, { Component } from 'react';\r\nimport './test-options-block.css';\r\n\r\nimport TestButton from '../test-button';\r\n\r\nconst ElementBlockClick = () => {\r\n    return(<div className=\"element-block-click\"></div>)\r\n}\r\n\r\nclass TestOptionsBlock extends Component{\r\n\r\n    state = {windowBlock: false}\r\n\r\n    setClickBlock = () => {\r\n        this.setState({windowBlock: true});\r\n        this.props.toggleButton();\r\n    }\r\n\r\n    removeClickBlock = () => {\r\n        this.setState({windowBlock: false});\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        if(this.props.count !== prevProps.count){\r\n            this.removeClickBlock();\r\n        }\r\n    }\r\n\r\n    render(){\r\n\r\n\r\n        const { windowBlock } = this.state;\r\n        const { data } = this.props;\r\n        const elements = data.map((item)=><TestButton text={item.translate} setClickBlock={this.setClickBlock} isMain={item.main} key={`${item.eword}${this.props.count}`} decCountMark={this.props.decCountMark} />)\r\n\r\n\r\n        return(<div className=\"test-options-block\">\r\n            {elements}\r\n            {windowBlock?<ElementBlockClick />:null}\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default TestOptionsBlock;","import TestOptionsBlock from './test-options-block';\r\n\r\nexport default TestOptionsBlock;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './test-variant-block.css';\r\n\r\nimport MainButton from '../main-button';\r\nimport TestOptionsBlock from '../test-option-block';\r\nimport { updateUserData } from '../../actions/actions';\r\nimport { averageMark } from '../../utils';\r\nimport { withEnwordService } from '../hoc-fun';\r\n/*задачи компонента\r\n- делать активной/неактивной кнопку делее/завершить\r\n- считать количество правильных вариантов ответа\r\n- обновление пользовательских данных в глобальном хранишище\r\n- обновление пользовательских данных на сервере\r\n- вызов информационного окна по завершению теста\r\n- генерирование текста для информационного окна \r\n*/\r\nclass TestVariantBlock extends Component{\r\n    \r\n    state = {buttonIsActive: false, informationText: \"\", countMark: 0}\r\n    \r\n    //делает кнопку \"далее/завершить\" активной после выбора варианта ответа\r\n    toggleButton = () => {\r\n        this.setState({buttonIsActive: true});\r\n    }\r\n    //при выборе верного варианата увеличивает счетчик на 1\r\n    decCountMark = () => {\r\n        this.setState((state)=>{\r\n            return {countMark: state.countMark+1}\r\n        });\r\n    }\r\n    //обновляет уровень, сердний балл, количество пройденных тестов в глобальном хранишище \r\n    //уровень обновляется если не был выбран уровень для тестирования\r\n    updateLevelMark = () => {\r\n        const { level, testCount, mark, selectLevel, login, loginPassWord } = this.props; \r\n        let newMark = averageMark(mark, testCount, this.state.countMark/2);\r\n        let newTestCount = testCount + 1;\r\n        let newLevel;\r\n        if( this.state.countMark/2>=4 && selectLevel===0 && level!==250){newLevel = level+1}else{newLevel=level}\r\n        if(this.props.login===false && this.props.level===10){newLevel=level}\r\n        this.props.updateUserData({level: newLevel, mark: newMark, testCount: newTestCount})\r\n        if(login){\r\n            const body = {point: newMark, test_count: newTestCount, level: newLevel}\r\n            this.props.enwordService.setUserData(loginPassWord, body)}\r\n        \r\n    }\r\n    \r\n    //обновляет данные на сервере \r\n    updateUserDataOnServer = () => {\r\n        if(this.props.login){\r\n            let body = {point: this.props.mark, test_count: this.props.testCount, level: this.props.level}\r\n            this.props.enwordService.setUserData(this.props.loginPassWord, body);\r\n        }\r\n    }\r\n    \r\n    //делает кнопку неактивной при получении следующего слова\r\n    componentDidUpdate(prevProps){\r\n        if(this.props.count !== prevProps.count){\r\n            this.setState({buttonIsActive: false});\r\n        }\r\n    }\r\n    //при нажатии на кнопку \"завершить\" обновляет глобальные данные и открывает инфомрационное окно \r\n    onClick = () => {\r\n        this.updateLevelMark();\r\n        this.props.getInfoWindow(this.textGeneration());\r\n        \r\n    }\r\n    //генерирует вариант текста информационного окна \r\n    textGeneration = () => {\r\n        let { level, selectLevel, login, userName} = this.props;\r\n        let { countMark } = this.state;\r\n        let hello, results, warnin, text;\r\n        hello = login?`${userName}`:null;\r\n        results = `Ваш балл за прохождение теста составляет ${(countMark/2).toFixed(2)}`;\r\n        if(countMark/2>=4 && selectLevel===0 && level<=250){\r\n            warnin = `Поздравляем, Вы перешли на уровень ${++level}`;\r\n        }\r\n        if(countMark/2<4 && selectLevel===0 && level<=250){\r\n            warnin = `Этого недостаточно для прохождения на новый уровень. Необходимо, чтобы средний балл был не менее 4.`;\r\n        }\r\n        if(countMark/2>=4 && selectLevel===0 && level===10 && login===false){\r\n            warnin = `Набранного балла достаточно для перехода на следующий уровень, но уровни более 10 доступны только зарегистрированным пользывателям.`;\r\n        }\r\n        if(countMark/2>=4 && selectLevel===0 && level===250){\r\n            warnin = `Поздровляем, Вы успешно прошли все уровни`;\r\n        }\r\n        \r\n        text = (<div>\r\n            <p>{hello}</p>\r\n            <p>{results}</p>\r\n            <p>{warnin}</p>\r\n        </div>);\r\n        \r\n        return text;\r\n\r\n    }\r\n    \r\n    render(){\r\n    \r\n        const { buttonIsActive } = this.state;\r\n        const { data, count, nextCount } = this.props;        \r\n        const mode = buttonIsActive?\"isActive\":\"notActive\";\r\n        \r\n        const button = count===9?<MainButton text={\"Завершить\"} onClick={this.onClick} mode={mode} />:\r\n                                 <MainButton text={\"Дальше\"} onClick={nextCount} mode={mode} />\r\n        \r\n        return(<div className=\"test-variant-block\">\r\n            <TestOptionsBlock data={data} count={count} toggleButton={this.toggleButton} decCountMark={this.decCountMark}/>\r\n            {button}\r\n        </div>);\r\n    };\r\n}\r\n\r\nconst mapStateToProps = (state) => ({ ...state });\r\n\r\nconst mapDispatchToProps = { updateUserData }\r\n\r\nexport default withEnwordService()(connect(mapStateToProps, mapDispatchToProps)(TestVariantBlock));\r\n\r\n\r\n","import TestVariantBlock from './test-variant-block.js';\r\n\r\nexport default TestVariantBlock;\r\n","import TestWords from './test-words';\r\n\r\nexport default TestWords;","import React, { Component } from 'react';\r\nimport './test-words.css';\r\nimport MainButton from '../main-button';\r\nimport { getNewArray } from '../hoc-fun';\r\nimport TestVariantBlock from '../test-variant-block';\r\nimport InformationWindow from '../information-window';\r\n\r\nexport default class TestWords extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {informationWindow: false, text: '', count:0, wordsList: this.props.data }\r\n    }\r\n\r\n    nextCount = () => {\r\n        this.setState(({ count })=>({count: ++count}));\r\n    }\r\n    \r\n    getInfoWindow = (text) => {\r\n        this.setState({informationWindow: true, text: text});\r\n        \r\n    }\r\n\r\n    render(){\r\n        const { count, wordsList, informationWindow } = this.state;\r\n        \r\n        if(informationWindow){\r\n            return <InformationWindow>{this.state.text}</InformationWindow>\r\n        }\r\n        \r\n        const newArray = getNewArray(wordsList, count, 3);//формируется массив из 4 элемент с одним верным\r\n\r\n        return(<div className=\"test-words\">\r\n            <MainButton text={wordsList[count].eword} mode=\"withWord\"/>\r\n            <TestVariantBlock data={newArray} count={count} getInfoWindow={this.getInfoWindow} nextCount={this.nextCount}/>\r\n        </div>)\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './interactive-window-data.css';\r\nimport LearnWords from '../learn-words/';\r\nimport SelectLevel from '../select-level';\r\nimport TestWords from '../test-words';\r\nimport { withEnwordService } from '../hoc-fun';\r\nimport Spinner from '../spinner'\r\n\r\nlet myName = \"dGVtYTp0ZW1hNTVnaw==\";//эти данные нужно получать из стейта\r\n\r\n\r\nclass InteractiveWindowData extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {data: null, mode: this.props.mode}\r\n        this.getWords = this.props.enwordService.getWords;\r\n    }\r\n\r\n    componentDidMount(){\r\n\r\n        if(this.props.mode===\"select\"){return}\r\n\r\n        this.getWords(this.props.level, myName).then((res)=>{//стоит получать данные уровня из стейта\r\n            this.setState({data: res});\r\n        });\r\n    }\r\n\r\n    modeTest = () => {//нужна для того, что бы в режиме обучения в конце вызывать тестирование \r\n        \r\n        this.setState({mode: \"test\"});\r\n    }\r\n\r\n    getNewLevel = (level, modeMain) => {//при выборе уровня вызывается функция, чтобы загрузить слова, передается селекту \r\n        \r\n        this.setState({data: null});\r\n        this.getWords(level, myName).then((res)=>{\r\n            this.setState({data: res, mode: modeMain});//modeMain передается сверху, чтобы знать, в каком режиме запускать новые слова\r\n        });\r\n    }\r\n\r\n    render(){\r\n\r\n        const {data, mode} = this.state;\r\n\r\n        const { modeMain, closeWindow } = this.props;\r\n\r\n        let elements;\r\n\r\n        if(!data && mode!==\"select\"){return <Spinner /> }\r\n        \r\n        if(mode===\"select\"){elements=<SelectLevel getNewLevel={this.getNewLevel} modeMain={modeMain} />;}\r\n        if(mode===\"learn\"){elements=<LearnWords data={data} modeTest={this.modeTest} />}\r\n        if(mode===\"test\"){elements=<TestWords data={data}  closeWindow={closeWindow} />}\r\n\r\n        return (<div className=\"interactive-window-data\">\r\n            {elements}\r\n        </div>);\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({state: state, loginPassWord: state.loginPassWord, level: state.level})\r\n\r\nexport default withEnwordService()(connect(mapStateToProps)(InteractiveWindowData));\r\n\r\n\r\n/*Компонент загружает слова, и вызывает нужные режимы в зависимости от переданного свойства\r\nПринимает пропсы:\r\ncloseWindow: ф-я для закрытия интерактивного окна из компонента тестирования, так же обнулит выбранный уровень \r\nmode: сообщает, в каком режиме нужно открыть окно\r\nmodeMain: сообщает, из какого режима было вызвано окно. Нужно для передачи в режим выбора чтобы тот знал, в каком режиме потом открыть новые слова.\r\n \r\n********************\r\n\r\n*/ ","import InteractiveWindowData from './interactive-window-data';\r\n\r\nexport default InteractiveWindowData;","import React, {Component, Fragment} from 'react';\r\nimport MainButton from '../main-button';\r\nimport InteractiveWindowData from '../interactive-window-data';\r\n\r\nclass MainLearnPage extends Component{\r\n\r\n    state = {mode: null}\r\n    \r\n    modeLearn = () => {\r\n        this.setState((state)=>({mode: \"learn\"}));\r\n    }\r\n    \r\n    modeSelect = () => {\r\n        this.setState((state)=>({mode: \"select\"}));\r\n    }\r\n\r\n    render(){\r\n\r\n        if(this.state.mode){\r\n            return <InteractiveWindowData mode={this.state.mode} modeMain=\"learn\" />\r\n        }\r\n        \r\n        return (<Fragment>\r\n            <MainButton text=\"Продолжить обучение\" onClick={this.modeLearn} mode=\"isActive\"/>\r\n            <MainButton text=\"Выберите уровень\" onClick={this.modeSelect} mode=\"isActive\"/>\r\n        </Fragment>)\r\n    }\r\n}\r\n\r\nexport default MainLearnPage;","import React, {Component} from 'react';\r\nimport MainBox from '../main-box';\r\nimport MainButton from '../main-button';\r\nimport InteractiveWindowData from '../interactive-window-data';\r\n\r\nclass MainTestPage extends Component{\r\n\r\n    state = {mode: null}\r\n    \r\n    modeTest = () => {\r\n        this.setState(()=>({mode: \"test\"}));\r\n    }\r\n    \r\n    modeSelect = () => {\r\n        this.setState(()=>({mode: \"select\"}));\r\n    }\r\n    \r\n    render(){\r\n\r\n        if(this.state.mode){\r\n            return <InteractiveWindowData mode={this.state.mode} modeMain=\"test\" />\r\n        }\r\n\r\n        return (<MainBox>\r\n            <MainButton text=\"Проверить слова одного пройденного уровня\" onClick={this.modeSelect} mode=\"isActive\" />\r\n            <MainButton text=\"Проверить слова за все пройденные уровни\" onClick={this.modeTest} mode=\"isActive\" />\r\n        </MainBox>)\r\n    }\r\n}\r\n\r\nexport default MainTestPage;","import React from 'react';\r\nimport './about-site.css';\r\n\r\nconst AboutSite = () => {\r\n    return(<div className=\"about-site\">\r\n        <h1>Добро пожаловать на SayWord</h1>\r\n        <p>Данный сайт предназначен для изучения 2500 самых распространенных слов, которые употребляются в английском языке.</p>\r\n        <p>Процесс изучения слов разбит на 250 уровней. На каждом уровне пользователю предстоит выучить 10 слов и после этого пройти тестирование. При правильном ответе на 8 из 10 вопросов, пользователь переходит на следующий уровень.</p>\r\n        <p>Также пользователь может выбрать один из уже пройденных уровней для повторения изученных слов либо пройти тестирование.</p>\r\n        <p>По результату каждого теста пользователь получает балл по шкале от 1 до 5, который влияет на его средний общий балл. Общий средний балл показывает общий уровень знаний и рассчитывается на основании оценок всех ранее пройденных тестов</p>\r\n        <p>При желании можно пройти тестирование по всем ранее пройденным уровням. В этом случае в рандомном порядке выбирается 10 слов из всех ранее изученных и по ним проводится проверка знаний.</p>\r\n        <p>Успехов в обучении!</p>\r\n    </div>);\r\n}\r\n\r\nexport default AboutSite;","import React from 'react';\r\nimport \"./contacts.css\";\r\n\r\nconst Contacts = () => {\r\n    return(<div className=\"contacts\">\r\n        <h3>Сайт разработан в качестве портфолио.</h3>\r\n        <h3>Контакты разработчика: <a href=\"mailto:artem.labar@gmail.com\">artem.labar@gmail.com</a></h3>\r\n    </div>)\r\n}\r\n\r\nexport default Contacts;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './app.css';\r\n\r\nimport Header from '../header';\r\nimport Footer from '../footer';\r\nimport { MainPage, AboutSite, Contacts } from '../pages';\r\nimport { loadingSite } from '../../actions/actions';\r\nimport { getCookie } from '../../utils';\r\nimport { withEnwordService } from '../hoc-fun';\r\nimport { Route } from 'react-router-dom';\r\n\r\n\r\nclass App extends React.Component{\r\n\r\n    componentDidMount(){\r\n      let cookie = getCookie(\"loginPassWord\");\r\n      if(cookie){\r\n          this.props.enwordService.getUserData(cookie).then((res)=>{\r\n              if(res.status===200){\r\n                  res.json().then((res)=>{\r\n                      this.props.loadingSite({loginPassWord: cookie,\r\n                                              level: res.level,  \r\n                                              mark: res.point, \r\n                                              userName: res.name, \r\n                                              testCount: res.test_count})\r\n                  });\r\n              }\r\n          });\r\n      }\r\n}\r\n\r\n    render(){\r\n        return(<div className=\"app\">\r\n                <Header />\r\n                <div className=\"main-content\">\r\n                    <Route exact path=\"/\" component={MainPage} />\r\n                    <Route exact path=\"/about\" component={AboutSite} />\r\n                    <Route exact path=\"/contacts\" component={Contacts} />\r\n                </div> \r\n            <Footer /> \r\n        </div>);\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({});\r\n\r\nconst mapDispatchToProps = { loadingSite }\r\n\r\nexport default withEnwordService()(connect(mapStateToProps, mapDispatchToProps)(App));","import App from './app';\r\n\r\nexport default App;","\r\n\r\n\r\nconst initialState = {loginPassWord: \"IA==\",//нужно для идентификации на сервере\r\n                      userName: \"Гость\", \r\n                      mark: 0, \r\n                      level: 1,\r\n                      testCount: 0,//количество пройденных тестов, нужно для подсчета среднего балла\r\n                      login: false, \r\n                      selectLevel: 0//выбранный пользывателем уровень для тестирования нужно для установления необходимости увеличения уровня\r\n                      }\r\n\r\nconst reducer = (state=initialState, action) => {\r\n    \r\n    switch(action.type){\r\n\r\n        case \"LOADING_LOGIN_SITE\"://запускается при первой загрузки сайта, если есть в куки пароль\r\n            const { mark, level, loginPassWord, userName, testCount } = action.payload\r\n            return { mark, level, loginPassWord, userName, testCount, login: true, selectLevel: 0 }\r\n\r\n        case \"LOGOUT_SITE\"://сбрасываем все до первоначального состояния\r\n            return initialState\r\n\r\n        case \"REGISTRATION\":\r\n            return { ...state, mark: 0, level: 1, login: true, userName: action.payload.userName, loginPassWord: action.payload.loginPassWord};\r\n\r\n        case \"UPDATE_USER_DATA\"://обновление стейта после прохождения теста \r\n\r\n            return {...state, mark: action.payload.mark, level: action.payload.level, testCount: action.payload.testCount, selectLevel: 0}\r\n\r\n        case \"SET_SELECT_LEVEL\":\r\n            return {...state, selectLevel: action.payload}\r\n\r\n        case \"RESET_SELECT_LEVEL\":\r\n            return{...state, selectLevel: 0}\r\n\r\n\r\n        default: return state;\r\n    }\r\n\r\n}\r\n\r\nexport default reducer;","import { createStore } from 'redux';\r\nimport reducer from './reducers';\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { EnwordServiceProvider } from './components/enword-service-context';\nimport EnwordService from './services';\nimport App from './components/app';\nimport store from './store';\nimport \"./index.css\"\n\nconst enwordService = new EnwordService();\n\nReactDOM.render(<Provider store={store}>\n                    <EnwordServiceProvider value={enwordService}>\n                        <Router>\n                            <App />\n                        </Router>\n                    </EnwordServiceProvider>\n                </Provider>, document.getElementById('root'));"],"sourceRoot":""}